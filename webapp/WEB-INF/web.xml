<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>pss</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	<error-page> 
  		<error-code>404</error-code> 
  		<location>/error.html</location> 
	</error-page>
	
	<session-config>  
         <session-timeout>240</session-timeout>  
    </session-config>  
		
 	<servlet-mapping>   
    	<servlet-name>default</servlet-name>  
    	<url-pattern>*.jpg</url-pattern>     
	</servlet-mapping>    
	<servlet-mapping>       
    	<servlet-name>default</servlet-name>    
    	<url-pattern>*.js</url-pattern>    
	</servlet-mapping>    
	<servlet-mapping>        
    	<servlet-name>default</servlet-name>       
    	<url-pattern>*.css</url-pattern>      
	</servlet-mapping>
	<servlet-mapping>        
    	<servlet-name>default</servlet-name>       
    	<url-pattern>*.png</url-pattern>      
	</servlet-mapping>
	
	<!--Start: 加载log4j -->
	<!-- 一定要在spring context加载之前加载 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>
	<listener>
		<listener-class>  
            org.springframework.web.util.Log4jConfigListener  
        </listener-class>
	</listener>
	<!--End: 加载log4j & 配置 -->
	
	
	<!--Start: 指定spring配置文件 -->
	<!--  
		如果需要在tomcat容器启动时就启动scheduler
		那么这里 applicationContext.xml 和 applicationContext-scheduler分开加载
		由于web容器在启动时会读取  applicationContext-scheduler 并实例化 Quartz
		而Spring容器在启动时也会读取applicationContext.xml一次并再次实例化 Quartz,
		会导致 启动后 规划的Job直接被执行2次，并且还是不同的scheduler实例
		实例 <param-value>classpath:applicationContext.xml,classpath:applicationContext-SCHEDULER.xml</param-value>
	  --> 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<!--End: 指定spring配置文件 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 配置Spring监听器 Start -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 指定将httprequest, httpresponse保存进context中 -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- 配置DispatcherServlet Start -->
	
	<servlet>
　　		<servlet-name>default</servlet-name>
　　		<servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
　　		<init-param>
　　			<param-name>debug</param-name>
　　			<param-value>0</param-value>
　　		</init-param>
　　		<init-param>
　　			<param-name>listings</param-name>
　　			<param-value>false</param-value>
　　		</init-param>
　　		<load-on-startup>1</load-on-startup>
　　</servlet>
	
	
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:applicationContext.xml</param-value>
		</init-param>
		<init-param>
    		<param-name>listings</param-name>
        	<param-value>false</param-value>
    	</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
	<!-- 配置DispatcherServlet End -->
	
	<!-- 配置，只允许使用https -->
	<!--
	<security-constraint>
    <web-resource-collection>
        <web-resource-name>pss</web-resource-name>
        <url-pattern>/*</url-pattern>
    </web-resource-collection>
    <user-data-constraint>
        关闭 SSL ，只需要将 CONFIDENTIAL 改为 NONE
        <transport-guarantee>NONE</transport-guarantee>
    </user-data-constraint>
    </security-constraint>
	-->
	
	<distributable/>
	
</web-app>
