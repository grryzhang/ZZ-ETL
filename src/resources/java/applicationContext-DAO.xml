<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	">

	<!-- 配置数据源 -->  
    <bean id="postgresqlDataSource"  
        class="org.apache.commons.dbcp.BasicDataSource" 
        destroy-method="close" >  <!-- lazy-init="false" -->
        <property name="driverClassName" value="${overall.db1.driverClassName}" />
        <property name="url" value="${overall.db1.url}" />  
        <!--  <property name="url" value="jdbc:mysql://localhost:3306/production" />  -->
        <property name="username" value="${overall.db1.username}" />  
        <property name="password" value="${overall.db1.password}" />  
        <property name="initialSize" value="5"/>
        <property name="maxIdle" value="20"/>
        <property name="maxActive" value="30"/>
        <property name="maxWait" value="5000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="defaultAutoCommit" value="false"/>
    </bean>  
    
    <bean 
    	id="evaluationPlatfomOracleDataSource" 
    	class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">     
        <!-- Connection Info -->  
        <property name="driverClassName" value="${overall.db.oracle.evaluationPlatform.driverClassName}" />  
        <property name="url" value="${overall.db.oracle.evaluationPlatform.url}" />  
        <property name="username" value="${overall.db.oracle.evaluationPlatform.username}" />  
        <property name="password" value="${overall.db.oracle.evaluationPlatform.password}" />  
  
        <!-- Connection Pooling DBCP -->  
        <property name="initialSize" value="3" />  
        <property name="maxActive" value="30" />  
        <property name="maxIdle" value="30" />  
        <property name="maxWait" value="1000" />  
        <property name="poolPreparedStatements" value="true" />  
        <property name="defaultAutoCommit" value="false" />  
    </bean>
    
    <bean 
    	id="ncOracleDataSource" 
    	class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">     
        <!-- Connection Info -->  
        <property name="driverClassName" value="${overall.db.oracle.nc.driverClassName}" />  
        <property name="url" value="${overall.db.oracle.nc.url}" />  
        <property name="username" value="${overall.db.oracle.nc.username}" />  
        <property name="password" value="${overall.db.oracle.nc.password}" />  
  
        <!-- Connection Pooling DBCP -->  
        <property name="initialSize" value="3" />  
        <property name="maxActive" value="30" />  
        <property name="maxIdle" value="30" />  
        <property name="maxWait" value="1000" />  
        <property name="poolPreparedStatements" value="true" />  
        <property name="defaultAutoCommit" value="false" />  
    </bean> 
    
    <bean 
    	id="futongMSSQLDataSource" 
    	class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">     
        <!-- Connection Info -->  
        <property name="driverClassName" value="${overall.db.MSSQL.futong.driverClassName}" />  
        <property name="url" value="${overall.db.MSSQL.futong.url}" />  
        <property name="username" value="${overall.db.MSSQL.futong.username}" />  
        <property name="password" value="${overall.db.MSSQL.futong.password}" />  
  
        <!-- Connection Pooling DBCP -->  
        <property name="initialSize" value="3" />  
        <property name="maxActive" value="30" />  
        <property name="maxIdle" value="30" />  
        <property name="maxWait" value="1000" />  
        <property name="poolPreparedStatements" value="true" />  
        <property name="defaultAutoCommit" value="false" />  
    </bean>     
    
    <bean id="multiDataSource" class="com.zhongzhou.Excavator.springsupport.MultiDataSource">
        <property name="defaultTargetDataSource" ref="postgresqlDataSource"/>
        <property name="targetDataSources">
            <map>
            	<entry key="MASTER_POSTGRESQL"           value-ref="postgresqlDataSource"/>
                <entry key="NC_ORACLE"                   value-ref="ncOracleDataSource"/>
                <entry key="EvaluationPlatform_ORACLE"   value-ref="evaluationPlatfomOracleDataSource"/>
                <entry key="FUTONG_MSSQL"                value-ref="futongMSSQLDataSource"/>
            </map>
        </property>
    </bean>
  
    <!-- Spring、MyBatis的整合，需要在 Spring 应用上下文中定义至少两样东西：一个SqlSessionFactory和至少一个数据映射器类（接口） -->  
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="multiDataSource" />  
        <property name="configLocation"  value="classpath:SqlMapConfig.xml" />  
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"></property>  
    </bean>  
      
    <!-- 配置事务管理器 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="multiDataSource" />  
    </bean>
    <tx:annotation-driven 
    	transaction-manager="transactionManager" /><!-- mode="aspectj" -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
        <property name="basePackage" value="com.zhongzhou.Excavator.DAO" />  
    </bean>  

    <!--######  Start: MongoDB config  ######-->
    <!-- mongoDB的配置对象 -->
	<bean id="mongoOptions" class="com.zhongzhou.Excavator.springsupport.mongo.MongoClientOptionsFactoryBean">
	    <!-- 与每个主机的连接数，默认为10 -->
	    <property name="connectionsPerHost" value="10" />
	    <!-- 连接超时时间(毫秒)，默认为10000 -->
	    <property name="connectTimeout" value="180000" />
	    <!-- 是否创建一个finalize方法，以便在客户端没有关闭DBCursor的实例时，清理掉它。默认为true -->
	    <property name="cursorFinalizerEnabled" value="true" />
	    <!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 -->
	    <property name="maxWaitTime" value="240000" />
	    <!-- 可等待线程倍数，默认为5.例如connectionsPerHost最大允许10个连接，则10*5=50个线程可以等待，更多的线程将直接抛异常 -->
	    <property name="threadsAllowedToBlockForConnectionMultiplier" value="3" />
	    <!-- socket读写时超时时间(毫秒)，默认为0，不超时 -->
	    <property name="socketTimeout" value="120000" />
	    <!-- 是socket连接在防火墙上保持活动的特性，默认为false -->
	    <property name="socketKeepAlive" value="false" />
	</bean>
	
	<bean id="mongoClient" class="com.zhongzhou.Excavator.springsupport.mongo.MongoFactoryBean">
	    <!-- mongoDB的配置对象 -->
	    <property name="mongoOptions" ref="mongoOptions"/>
	    <!-- 是否主从分离(读取从库)，默认为false，读写都在主库 -->
	    <!--  <property name="readSecondary" value="false"/> -->
	    <!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe -->
	    <property name="writeConcern" value="SAFE"/>
	    <!-- 设定服务器列表，无默认 -->
	    <property name="serverStrings" value="${overall.db.mongo.servers.serializer}" />
		<property name="credentialStrings" value="${overall.db.mongo.servers.serializer.credential}" />
	</bean>
	
	<bean id="mongoClientOuterNet" class="com.zhongzhou.Excavator.springsupport.mongo.MongoFactoryBean">
	    <!-- mongoDB的配置对象 -->
	    <property name="mongoOptions" ref="mongoOptions"/>
	    <!-- 是否主从分离(读取从库)，默认为false，读写都在主库 -->
	    <!--  <property name="readSecondary" value="false"/> -->
	    <!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe -->
	    <property name="writeConcern" value="SAFE"/>
	    <!-- 设定服务器列表，无默认 -->
	    <property name="serverStrings" value="${overall.db.mongo.servers.outerNet.serializer}" />
		<property name="credentialStrings" value="${overall.db.mongo.servers.outerNet.serializer.credential}" />
	</bean>
	
	<bean id="morphia" class="com.zhongzhou.Excavator.springsupport.mongo.MorphiaFactoryBean" >
    	<!-- 指定要扫描的POJO包路径 -->
        <property name="mapPackages">
            <array>
                <value>com.zhongzhou.model</value>
            </array>
    	</property>
	</bean>
	
	<bean id="morphiaOutNet" class="com.zhongzhou.Excavator.springsupport.mongo.MorphiaFactoryBean" >
    	<!-- 指定要扫描的POJO包路径 -->
        <property name="mapPackages">
            <array>
                <value>com.zhongzhou.model</value>
            </array>
    	</property>
	</bean>
	
	<bean id="mongoMorphiaDataStore" class="com.zhongzhou.Excavator.springsupport.mongo.MongoDatastoreFactoryBean" >
	    <property name="morphia" ref="morphia"/>
	    <property name="mongoClient" ref="mongoClient"/>
	    
	    <!-- collection的名称 -->
	    <property name="dbName" value="${overall.db.mongo.servers.serializer.dbname}"/>
	    <!-- 是否进行index和caps的确认操作，默认为flase -->
	    <!-- 
	    <property name="toEnsureIndexes" value="true"/>
	    <property name="toEnsureCaps" value="true"/>
	     -->
	</bean>
	
	<bean id="mongoMorphiaOuterNetDataStore" class="com.zhongzhou.Excavator.springsupport.mongo.MongoDatastoreFactoryBean" >
	    <property name="morphia" ref="morphiaOutNet"/>
	    <property name="mongoClient" ref="mongoClientOuterNet"/>
	    
	    <!-- collection的名称 -->
	    <property name="dbName" value="${overall.db.mongo.servers.outerNet.serializer.dbname}"/>
	    <!-- 是否进行index和caps的确认操作，默认为flase -->
	    <!-- 
	    <property name="toEnsureIndexes" value="true"/>
	    <property name="toEnsureCaps" value="true"/>
	     -->
	</bean>
	<!--######  End: MongoDB config  ######-->
	
</beans>